bien!
;;--FRAME--L0:
LABEL: L3
OPER: movq $L1, %'d0 D:[T2] S:[]
MOVE: movq %'s0, %'d0 D:T0 S:T2
OPER: pushq 's0 D:[] S:[T0]
OPER: call print D:[rax,rdx,rcx,r10,r11,rdi,rsi,rdx,rcx,r8,r9,rax] S:[]
OPER: addq $8, %'d0 D:[rsp] S:[rsp]
OPER: movq $0, %'d0 D:[T3] S:[]
MOVE: movq %'s0, %'d0 D:rax S:T3
OPER: jmp 'j0 D:[] S:[] J:[L2]
LABEL: L2
OPER:  D:[] S:[rax,rsp,rbp,rbx,r12,r13,r14,r15]
;;-END-FRAME-:
;;--FLOW--L0:
def:
	n0: 
	n1: T2
	n2: T0
	n3: 
	n4: rax, rdx, rcx, r10, r11, rdi, rsi, rdx, rcx, r8, r9, rax
	n5: rsp
	n6: T3
	n7: rax
	n8: 
	n9: 
	n10: 
use:
	n0: 
	n1: 
	n2: T2
	n3: T0
	n4: 
	n5: rsp
	n6: 
	n7: T3
	n8: 
	n9: 
	n10: rax, rsp, rbp, rbx, r12, r13, r14, r15
ismove:
	n0: false
	n1: false
	n2: true
	n3: false
	n4: false
	n5: false
	n6: false
	n7: true
	n8: false
	n9: false
	n10: false
succesors:
	n0(LABEL: L3): n1
	n1(OPER: movq $L1, %'d0 D:[T2] S:[]): n2
	n2(MOVE: movq %'s0, %'d0 D:T0 S:T2): n3
	n3(OPER: pushq 's0 D:[] S:[T0]): n4
	n4(OPER: call print D:[rax,rdx,rcx,r10,r11,rdi,rsi,rdx,rcx,r8,r9,rax] S:[]): n5
	n5(OPER: addq $8, %'d0 D:[rsp] S:[rsp]): n6
	n6(OPER: movq $0, %'d0 D:[T3] S:[]): n7
	n7(MOVE: movq %'s0, %'d0 D:rax S:T3): n8
	n8(OPER: jmp 'j0 D:[] S:[] J:[L2]): n9
	n9(LABEL: L2): n10
	n10(OPER:  D:[] S:[rax,rsp,rbp,rbx,r12,r13,r14,r15]): 
;;-END-FLOW-:
yes!!
