Terminado el coloreo se emite el assembler a un archivo.s. Esto se puede hacer con
    TextIO.openOut(nombre)
    TextIO.output(file, string)
    TextIO.close(file)

El ensamblado y linkeo lo pueden hacer con el gcc. Es necesario incluir el runtime puede ser .c o .o)..
Nota: Tiger no tiene medios para manejar explícitamente memoria dinámica. Se aloja memoria dinámica cuando se crean arreglos y records, pero no tenemos medios para liberar esa memoria. Así que, una implementación seria descansa en usar...

Garbage Collectors
Un primer intento, fallido, puede ser usar un contador de referencias por c/objecto alocado.
Cuando las referencias locales desaparecen se decrementa el contador; cuyando es cero se libera la memoria:
Contraejemplo:
    (dos bloques f0ormado un ciclo de referencias)
    
Segundo intento: hacemos un diccionario de todos los objetos alocados.
Cuando la memoria es escasa recorremos el segmento de datos viendo qué punteros están vivos y marcamos los objetos apuntados. Luego se buscan punteros dentro de los objetos marcados y sigo. Los que se quedan sin marcar se desalojan.
Problema: Necesitamos saber qué valores son punteros.

Primer intento: boxed values
[tag|  valor]
 ^
 |--indica si es un puntero o no (1 byte)
 Problema causa desalineación en todos los tipos. Podriamos extender el tag a 4bytes pero estaríamos desperdiciando mucha memoria.
 
Segundo intento(mosml): boxed values internos. Consiste en poner el tag como un bit DENTRO del valor. Reduce el rango de valores y complica la aritmética (pues tenemos que arreglar el numero cada vez que se quiere hacer una operación)

Tercer intento: unboxed values (MLTON)
Usa un análisis MUY complicado. Unboxed significa que no están tageados.

Cuarto intento: unboxed values y optimismo (si un valor tiene un valor compatible con el valor de un puntero, es un puntero).
Esto es usado por un CC muy popular, hecho po BOehm (Bohm) y De Mers. Sólo hay que compilarlo y linkear el ejecutable.
Así que, el ensamblado y linkeo se puede hacer con: (ej.)
Process.system("gcc -g -Wall "^salida^" -runtime.o -gc.o")


Si el target no es Intel, es recomendable
Ellcc (Elk) ó QEMU

--------------o------------------------------------


Ultima parte del coloreo
===============
procedure Freeze()
    let u \in freezeWorkList
    freezeWorkList <- freezeWorkList \ {u}
    simplifyWorkList <- SimplifyWorkList U {u}
    FreezeMoves(u)
    
procedure FreezeMoves(u)
    forall m (=copy(u, v) ov copy(v, u)) \in NodeMoves(u)
        if m \in activeMoves then
            activeMoves <- activeMoves \ {m}
        else
            workListMoves <- workListMoves \ {m}
        frozenMoves <- frozenMoves U {m}
        if NodeMoves(v)={} ^ degree[v]<K then
            freezeWorkList <- freezeWorkList \ {v}
            simplifyWorkList <- simplifyWorkList U {v}
            
procedure SelectSpill()
    let m \in spillWorkList se selecciona con alguna heurística. Evite elegir nodos con poca vida, que puede resultar en fetchesde registros spilleados.
    spillWorkList <- spillWorkList \ {m}
    simplifyWorkList <- simplifyWorkList U {m}
    FreezeMoves(m)
    
procedure AssignColors()
    while SelectStack not empty
        let m = pop(selectStack)
        okColors <- {0, ..., k-1}
        for all w \in adjList[m]
            if GetAlias(w) \in (coloredNodes U precolored)
                okColors <- okCOlors \ {color[getAlias(w)]}
            if okColors = {}
                spilledNodes <- spilledNodes U {m}
            else
                coloredNodes <- coloresNodes U {m}
                let c \in okColors
                color[m] <- c
        forall m \in coalescedNodes
            color[n] <- color[getAlias(n)]

procedure RewriteProgram()
    Aloque memoria para cada v \in spillesNodes
    Cree un nuevo temporario v_i para cada def y cada use.
    En las instrucciones inserte un store luego de cada def de v_i y un fetch antes de cada use de v_i
    Ponga las v_i en un conjunto newTemps
    spilledNodes <- {}
    initial <- coloredNodes U coalesedNodes U newTemps
    coloredNodes <- {}
    coalescedNodes <- {}
    
    
Nota: Briggs: se coalescen todos los temporarios que no interfieren. Resulta muy agresivo y podía dar lugar a grafos no coloreables.

- Posteriormente, George y Appel (padre) proponen un coalescing menos agresivo, pero iterando (paper george.pdf).
Mencionamos una optimizaión conocida como earliest evaluation (Morel & Renvoise).
Si uno tiene v <- (u_1, ..., u_n) #
 v podra ser calculado apenas estén disponibles los valores de u_1, ..., u_n, busando los defs correspondientes más cercanos, y moviendo # a continuación. Esto es posible si los defs están en bloques básicos que dominen el BB de v.
(recordar: A domina a B sii A está en todo camino que una a begin con B
Propiedades:
- Reflexiva: A domina a A
- Antisimétrica: si A domina a B y B domina a A, B \= A
- Transitiva: si A domina  B y B domina a C => A domina a C
Por lo tanto, es relación de orden y podemos construir un árbol.)

- Propagación de cttes.

- Common subexpression Elimination
Ej: x^8 = (x*x)^2^2
Para hacerlo fácil, implementarlo dentro de la función.

