Nota
Para ayuda a mapear los CJUMPs con los jumps condicionales reales se conviene en hacer que la etiqueta false del CJUMP
siga a continuación de este.
Esto es muy sencillo con los bloques básicos.
Si, por ventura, queda

|                           |           |                             |
|  CJUMP(oper,e1,e2,lv,lf)  |           | CJUMP(not oper,e1,e2,lf,lv) |
|___________________________|           |_____________________________|
                                 => 
 ___________________________             _____________________________
|LABEL lv                   |           |LABEL lv                     |
|                           |           |                             |

Pasemos al Maximal Much

Estará formado por dos funciones mayores

munchExp: Tree.exp -> Temp.temp
munchStm: Tree.stm -> unit (*usa un efecto lateral*)

Tendremos 2 funciones extras

    (* para munchStm *)
    val  ilist = ref([]:string list)
    fun emit s = ilist := !ilist@[i]
        o mejor  ilist := i::(!ilist) (*invirtiendo la ilist a la hora de entregarla*)


    (* para munchExp *)
    fun result gen = let val t=Temp.newtemp() in gen t end
    El assembler a producir 
    struct Assem:
    sig
        type reg   = string
        type temp  = Temp.temp
        type label = Temp.label
        
    datatype instr = OPER of {  assem: string,
                                dst:   temp list,
                                src:   temp list,
                                jump:  label list option
                             }
                    |MOVE of {  assem: string,
                                dst:   temp,
                                src:   temp
                             }
                    |LABEL of{  assem: string,
                                lab:   label
                             }

Receta: haga el caso más general, luego refine, tomando en cuenta el target elegido.

Ej: structure T=Tree
    
    
Ahora los casos partuiculares

    |muchStm(T.MOVE(e1,e2))= emit(MOVE{assem= "mvq `s0,`d0\n", dst=munchExp e1, src=munchExp e2})
    |munchStm(T.MOVE(TEMP t, CONST n)) = 
        emit(OPER{assem="mvq $"^atoi n^", `d0\n",
                    dst=[t], src=[], jump=NONE})
    |munchStm(T.MOVE(TEMP t1, TEMP t2))=
        emit(MOVE{assem="mvq `s0, `d0\n",
                    dst=[t1], src=[t2]})
    |muchStm(T.MOVE(MEM(TEMP t), e)) = 
        emit(MOVE{assem="mvq `s0, 0[`d0]\n",
                    dst=[t],
                    src=[munchExp e]})
    etc...
    and munchExp(TEMP t) = t
    |   munchExp(CONST n) =
        result (fn r=> (MOVE(TEMP r, CONST n); r))
    |   munchExp(BINOP(ADD, e1, e2)) =
        result (fn r=> OPER{assem="add `s0, `s1, `d0\n",
                    src=[munchExp e1, munchExp e2],
                    dst=[r], jump=NONE}) (*PARA RISC*)
        result (fn r=> OPER{assem="mvq `s0, `d0\naddq `s1, `d0\n",
                    src=[munchExp e1, munchExp e2],
                    dst=[r], jump=NONE}) (*PARA CISC*)


fun atoi n =
    if valOf Int.minInt = n then "-Int.minInt"
    else if n<0 then "-"^Int.toString(~n)
    else Int.toString n

Volvamos a munchExp
Codigo a generar para CALL(func, lparams0
El pasaje de argumentos, en TIger es por valor e eager,
Modos de pasaje de parametros:
    a) Pasaje por valor: el llamado recibe copias de los valores de los parametros (ej.C)
    b) Pasaje por referencia: El llamado recibe la dirección
        donde está el valor del parametro
    c) Copy/Restore. Los parametros se clasifican en tres grupos:
        in (su valor no se cambiara en el llamante, pasa por valor)
        out (su valor cambiara en el llamante)
        in out (su valor es provisto por el llamante y este ve los cambios)
        Se implementa así:
            Al invocarse, se copian los in e in out
            Al terminar la invocación, los out e in out son escritos en el llamante
            
            El copy/restore es distinto del pasaje por referencia, pues el llamante solo recibe los cambios al terminar la invocación.
            (ej Ada)
        
        Como diferenciar si un lenguaje hace copy/restore de uno por referencia? Con este programa:
            var i:integer;
            procedure f(out n) is
            begin
                n:=4;
                i:=5
            end f;
            ...
            f(i)
    d) Thunk: El llamado recibe una funcion (thunk)
        que cuando es evaluada produe el valor del parámetro.
        (Algol60 y Algol62)
        Tiger usa pasaje por valor.
Acá hay que tomar en cuenta las convenciones de llamada de la arquitectura,
para poder interfacear con el runtime en C.
Incluso si no hacemos runtime en C, siempre es conveniente seguir las convenciones.
Ej:
    i386: pasa todo por stack, en el caso de C, de derecha a izquierda,
        en Pascal MODULA/2, etc de izquierda a derecha.
        Ventaja de C: permite obtener el primer argumento, haciendo posible implementar argumentos variables como en printf.
        Ventaja de izq a der: ret n
    TIGER: evalua los parametros de izquierda a derecha y pushea de derecha a izquierda.
        Pues si hay un efecto lateral podemos saber cual es su efecto lateral.
        
        
Una forma de tratar los CALL

CALL(func, lparams)= 
    let fun regards  []     lp      instrs = (instrs, lp)
           |regards  _      []      instrs = (instrs, [])
           |regards (h::t)  (u::v)  instrs = regards t v (insts@(MOVE{assem="mvq `s0, `d0\naddq `s1, `d0\n", dst=h,src=v}))
    
En Temp tenfremos un 
val regargs=[registros]

Pasamos los registros eax,...,edi

 _____
|asm("pushl %eax");
|asm("pushl %ebx");
|asm("pushl %ecx");
|.
|.
|.
|asm("pushl %edi);
|_____

 _____
|asm("subl $24, %esp");
|asm("movl %edi, (%esp)");
|asm("movl %esi, 4(%esp)");
|asm("movl %edx, 8(%esp)");
|.
|.
|.
|_____


Operaciones fuera de pipeline(RISC)
    -Use mops p/los delay slots
    -Use las versiones de espera de los productos y cocientes

Detaflow (cálculo de liveness)
    Esta erapa trata de determinar en qué instrucciones un temporario debe estar "vivo"
    Definiciones:
        -Un temporario se define en una instruccion I di esta en dst
        -Un temporario se usa en una instruccio I si está en src
    Ahora ¿En cuál de estas instucciones debe estar vivo t?
    
    1)t  <- e           def t
    2)t1 <- 1
    3)t2 <- t+t1        use t
    4)t3 <- t2
    5)t2 <- t3
    6)t  <- 10          def t
    7)t1 <- 11
    8)t2 <- t+t1        use t
    
    t debe estar vivo en 2 y 7
    en 4 y 5 NO
    
    
    Para cada instrucción y temporario definamos
    
        In  de I es el conjunto de temporarios que deben entrar vivos
        Out de I es el conjunto de temporarios que deben salir  vivos de esa instrucción
        
        Out[I] = U{s /in succ(I)} In[s]
        In[I]  = use(I) U (out(I)  \ Def(I))
        
        ¿Cómo se podrían resolver? Por iteración. Es un punto fijo! Alcanza con el mínimo 
        punto fijo pero no es óptimo.
        Hay que ser conservador, y no eliminar los temporarios a menos que estemos seguro 
        que no se usen más, es preferible que queden temporarios que no se van a usar.
        
        Ver algoritmo 10.4 pagina 214 Nos pasan el código ml para hacer esto.
